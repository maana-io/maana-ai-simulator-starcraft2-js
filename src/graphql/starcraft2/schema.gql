# Boilerplate
type Info {
  id: ID!
  name: String!
  description: String
}

# Unkown
# Idle
# Starting
# Running
# Stopped
# Ended
# Error
type StatusCode {
  id: ID!
}

# Training
# Performing
type Mode {
  id: ID!
}

input AgentInput {
  race: Int
  uri: String
  token: String
  features: [Float!]
}

type Agent {
  race: Int
  uri: String
  token: String
  features: [Float!]
}

input ConfigInput {
  sessionId: ID!
  episodes: Int
  environmentId: ID!
  modeId: ID
  agents: [AgentInput!]!
}

type Config {
  sessionId: ID!
  episodes: Int!
  environment: Environment!
  mode: Mode!
  agents: [Agent!]!
}

type Environment {
  id: ID!
  name: String
  observationSpace: FeatureSpace
  actionSpace: FeatureSpace
  rewardSpace: FeatureSpace
}

type Dimension {
  id: ID!
  isContinuous: Boolean
  rangeMin: Float
  rangeMax: Float
}

type FeatureSpace {
  id: ID!
  name: String
  dimensions: [Dimension]
}

type Status {
  id: ID!
  code: StatusCode!
  errors: [String!]!
}

type AgentStats {
  score: Float!
  lastReward: [Float!]!
  lastAction: [Float!]!
  totalReward: [Float!]!
}

type Observation {
  episode: Int!
  step: Int!
  mode: Mode
  data: [Float!]!
  agentStats: [AgentStats!]!
  render: String!
  status: Status!
}

type Query {
  info: Info!
  listEnvironments: [Environment!]!
  status(sessionId: ID!): Status!
  observe(sessionId: ID!): Observation!
}

type Mutation {
  run(config: ConfigInput!): Status!
  stop(sessionId: ID!): Status!
}
